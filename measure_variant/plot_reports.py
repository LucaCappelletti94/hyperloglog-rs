"""Python script to load and plot the reports generated by the measure_variant script.

The two reports, namely 'latest_report.csv' and 'reference_report.csv', contain a single
column with the relative error of respectively the latest and reference variants.

"""

import pandas as pd
import matplotlib.pyplot as plt

def hyperloglog_error(p: int) -> float:
    """Returns the expected error of the HyperLogLog algorithm for a given precision."""
    return 1.04 / (p ** 0.5)

def plot_all():
    """Load the reports and plot the histograms, boxplots and relative error plots."""
    # Load the reports
    latest_report = pd.read_csv("latest_report.csv")
    reference_report = pd.read_csv("reference_report.csv")

    latest_report.sort_values(by="cardinality", inplace=True)
    reference_report.sort_values(by="cardinality", inplace=True)

    fig, axs = plt.subplots(2, 1, figsize=(10, 10), sharex=False, sharey=False)

    axs[0].plot(
        latest_report.cardinality,
        latest_report.relative_error,
        label="Latest"
    )
    axs[0].plot(
        reference_report.cardinality,
        reference_report.relative_error, label="Reference", linestyle="--", alpha=0.7
    )

    # We plot an horizontal line representing the expected error of the HyperLogLog algorithm.
    axs[0].axhline(hyperloglog_error(14), color="red", label="Expected error")

    axs[0].set_title("Relative error")
    axs[0].set_xlabel("Cardinality")
    axs[0].set_ylabel("Relative error")
    axs[0].legend()


    axs[1].plot(
        latest_report.cardinality,
        latest_report.estimated_cardinality - reference_report.estimated_cardinality,
        label="Latest - Reference"
    )

    axs[1].plot(
        latest_report.cardinality,
        latest_report.cardinality - reference_report.estimated_cardinality,
        label="GT - Reference"
    )

    axs[1].plot(
        latest_report.cardinality,
        latest_report.cardinality - latest_report.estimated_cardinality,
        label="GT - Latest"
    )

    axs[1].set_title("Estimated cardinality difference")
    axs[1].set_xlabel("Cardinality")
    axs[1].set_ylabel("Estimated cardinality difference")
    axs[1].legend()

    fig.tight_layout()
    fig.savefig("comparison.png")


if __name__ == "__main__":
    plot_all()
